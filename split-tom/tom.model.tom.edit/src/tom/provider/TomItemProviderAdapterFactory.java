/**
 */
package tom.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import tom.util.TomAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TomItemProviderAdapterFactory extends TomAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TomItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.HostCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostCodeItemProvider hostCodeItemProvider;

	/**
	 * This creates an adapter for a {@link tom.HostCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostCodeAdapter() {
		if (hostCodeItemProvider == null) {
			hostCodeItemProvider = new HostCodeItemProvider(this);
		}

		return hostCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Call} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallItemProvider callItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Call}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallAdapter() {
		if (callItemProvider == null) {
			callItemProvider = new CallItemProvider(this);
		}

		return callItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Declaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarationItemProvider declarationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Declaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarationAdapter() {
		if (declarationItemProvider == null) {
			declarationItemProvider = new DeclarationItemProvider(this);
		}

		return declarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Affectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AffectationItemProvider affectationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Affectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAffectationAdapter() {
		if (affectationItemProvider == null) {
			affectationItemProvider = new AffectationItemProvider(this);
		}

		return affectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Tom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TomItemProvider tomItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Tom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTomAdapter() {
		if (tomItemProvider == null) {
			tomItemProvider = new TomItemProvider(this);
		}

		return tomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter() {
		if (contextItemProvider == null) {
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Linkable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkableItemProvider linkableItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Linkable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkableAdapter() {
		if (linkableItemProvider == null) {
			linkableItemProvider = new LinkableItemProvider(this);
		}

		return linkableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.GlobalVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalVariableItemProvider globalVariableItemProvider;

	/**
	 * This creates an adapter for a {@link tom.GlobalVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalVariableAdapter() {
		if (globalVariableItemProvider == null) {
			globalVariableItemProvider = new GlobalVariableItemProvider(this);
		}

		return globalVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.LocalVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalVariableItemProvider localVariableItemProvider;

	/**
	 * This creates an adapter for a {@link tom.LocalVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalVariableAdapter() {
		if (localVariableItemProvider == null) {
			localVariableItemProvider = new LocalVariableItemProvider(this);
		}

		return localVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.VariableSimple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableSimpleItemProvider variableSimpleItemProvider;

	/**
	 * This creates an adapter for a {@link tom.VariableSimple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableSimpleAdapter() {
		if (variableSimpleItemProvider == null) {
			variableSimpleItemProvider = new VariableSimpleItemProvider(this);
		}

		return variableSimpleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.VariableList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableListItemProvider variableListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.VariableList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableListAdapter() {
		if (variableListItemProvider == null) {
			variableListItemProvider = new VariableListItemProvider(this);
		}

		return variableListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Block} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockItemProvider blockItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Block}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockAdapter() {
		if (blockItemProvider == null) {
			blockItemProvider = new BlockItemProvider(this);
		}

		return blockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Callback} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallbackItemProvider callbackItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Callback}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallbackAdapter() {
		if (callbackItemProvider == null) {
			callbackItemProvider = new CallbackItemProvider(this);
		}

		return callbackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.CallbackDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallbackDefinitionItemProvider callbackDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.CallbackDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallbackDefinitionAdapter() {
		if (callbackDefinitionItemProvider == null) {
			callbackDefinitionItemProvider = new CallbackDefinitionItemProvider(this);
		}

		return callbackDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Arguments} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentsItemProvider argumentsItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Arguments}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentsAdapter() {
		if (argumentsItemProvider == null) {
			argumentsItemProvider = new ArgumentsItemProvider(this);
		}

		return argumentsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Argument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentItemProvider argumentItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Argument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentAdapter() {
		if (argumentItemProvider == null) {
			argumentItemProvider = new ArgumentItemProvider(this);
		}

		return argumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ArgumentTypeSuffix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentTypeSuffixItemProvider argumentTypeSuffixItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ArgumentTypeSuffix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentTypeSuffixAdapter() {
		if (argumentTypeSuffixItemProvider == null) {
			argumentTypeSuffixItemProvider = new ArgumentTypeSuffixItemProvider(this);
		}

		return argumentTypeSuffixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ArgumentTypePrefix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentTypePrefixItemProvider argumentTypePrefixItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ArgumentTypePrefix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentTypePrefixAdapter() {
		if (argumentTypePrefixItemProvider == null) {
			argumentTypePrefixItemProvider = new ArgumentTypePrefixItemProvider(this);
		}

		return argumentTypePrefixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ImportConstruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportConstructItemProvider importConstructItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ImportConstruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportConstructAdapter() {
		if (importConstructItemProvider == null) {
			importConstructItemProvider = new ImportConstructItemProvider(this);
		}

		return importConstructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.IncludeConstruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IncludeConstructItemProvider includeConstructItemProvider;

	/**
	 * This creates an adapter for a {@link tom.IncludeConstruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIncludeConstructAdapter() {
		if (includeConstructItemProvider == null) {
			includeConstructItemProvider = new IncludeConstructItemProvider(this);
		}

		return includeConstructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Statement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementItemProvider statementItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Statement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementAdapter() {
		if (statementItemProvider == null) {
			statementItemProvider = new StatementItemProvider(this);
		}

		return statementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Term} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermItemProvider termItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Term}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermAdapter() {
		if (termItemProvider == null) {
			termItemProvider = new TermItemProvider(this);
		}

		return termItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TermSum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermSumItemProvider termSumItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TermSum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermSumAdapter() {
		if (termSumItemProvider == null) {
			termSumItemProvider = new TermSumItemProvider(this);
		}

		return termSumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TermConst} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermConstItemProvider termConstItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TermConst}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermConstAdapter() {
		if (termConstItemProvider == null) {
			termConstItemProvider = new TermConstItemProvider(this);
		}

		return termConstItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TermNull} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermNullItemProvider termNullItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TermNull}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermNullAdapter() {
		if (termNullItemProvider == null) {
			termNullItemProvider = new TermNullItemProvider(this);
		}

		return termNullItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TermVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermVariableItemProvider termVariableItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TermVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermVariableAdapter() {
		if (termVariableItemProvider == null) {
			termVariableItemProvider = new TermVariableItemProvider(this);
		}

		return termVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TermOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermOperationItemProvider termOperationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TermOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermOperationAdapter() {
		if (termOperationItemProvider == null) {
			termOperationItemProvider = new TermOperationItemProvider(this);
		}

		return termOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Return} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReturnItemProvider returnItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Return}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReturnAdapter() {
		if (returnItemProvider == null) {
			returnItemProvider = new ReturnItemProvider(this);
		}

		return returnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.MatchConsctruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchConsctructItemProvider matchConsctructItemProvider;

	/**
	 * This creates an adapter for a {@link tom.MatchConsctruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchConsctructAdapter() {
		if (matchConsctructItemProvider == null) {
			matchConsctructItemProvider = new MatchConsctructItemProvider(this);
		}

		return matchConsctructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.MatchPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchPatternItemProvider matchPatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.MatchPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchPatternAdapter() {
		if (matchPatternItemProvider == null) {
			matchPatternItemProvider = new MatchPatternItemProvider(this);
		}

		return matchPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ArgumentMatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentMatchItemProvider argumentMatchItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ArgumentMatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentMatchAdapter() {
		if (argumentMatchItemProvider == null) {
			argumentMatchItemProvider = new ArgumentMatchItemProvider(this);
		}

		return argumentMatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.PatternAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternActionItemProvider patternActionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.PatternAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternActionAdapter() {
		if (patternActionItemProvider == null) {
			patternActionItemProvider = new PatternActionItemProvider(this);
		}

		return patternActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConstraintPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintPatternItemProvider constraintPatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConstraintPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintPatternAdapter() {
		if (constraintPatternItemProvider == null) {
			constraintPatternItemProvider = new ConstraintPatternItemProvider(this);
		}

		return constraintPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConstraintAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintActionItemProvider constraintActionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConstraintAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintActionAdapter() {
		if (constraintActionItemProvider == null) {
			constraintActionItemProvider = new ConstraintActionItemProvider(this);
		}

		return constraintActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Pattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternItemProvider patternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Pattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternAdapter() {
		if (patternItemProvider == null) {
			patternItemProvider = new PatternItemProvider(this);
		}

		return patternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.NamedPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedPatternItemProvider namedPatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.NamedPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedPatternAdapter() {
		if (namedPatternItemProvider == null) {
			namedPatternItemProvider = new NamedPatternItemProvider(this);
		}

		return namedPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.AntiPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AntiPatternItemProvider antiPatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.AntiPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAntiPatternAdapter() {
		if (antiPatternItemProvider == null) {
			antiPatternItemProvider = new AntiPatternItemProvider(this);
		}

		return antiPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.PlainPatternConst} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainPatternConstItemProvider plainPatternConstItemProvider;

	/**
	 * This creates an adapter for a {@link tom.PlainPatternConst}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainPatternConstAdapter() {
		if (plainPatternConstItemProvider == null) {
			plainPatternConstItemProvider = new PlainPatternConstItemProvider(this);
		}

		return plainPatternConstItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.PlainPatternVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainPatternVariableItemProvider plainPatternVariableItemProvider;

	/**
	 * This creates an adapter for a {@link tom.PlainPatternVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainPatternVariableAdapter() {
		if (plainPatternVariableItemProvider == null) {
			plainPatternVariableItemProvider = new PlainPatternVariableItemProvider(this);
		}

		return plainPatternVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.JokerPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JokerPatternItemProvider jokerPatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.JokerPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJokerPatternAdapter() {
		if (jokerPatternItemProvider == null) {
			jokerPatternItemProvider = new JokerPatternItemProvider(this);
		}

		return jokerPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.PlainPatternOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainPatternOperationItemProvider plainPatternOperationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.PlainPatternOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainPatternOperationAdapter() {
		if (plainPatternOperationItemProvider == null) {
			plainPatternOperationItemProvider = new PlainPatternOperationItemProvider(this);
		}

		return plainPatternOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.List} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemProvider listItemProvider;

	/**
	 * This creates an adapter for a {@link tom.List}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListAdapter() {
		if (listItemProvider == null) {
			listItemProvider = new ListItemProvider(this);
		}

		return listItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.OperationList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationListItemProvider operationListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.OperationList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationListAdapter() {
		if (operationListItemProvider == null) {
			operationListItemProvider = new OperationListItemProvider(this);
		}

		return operationListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ExplicitTermList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExplicitTermListItemProvider explicitTermListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ExplicitTermList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExplicitTermListAdapter() {
		if (explicitTermListItemProvider == null) {
			explicitTermListItemProvider = new ExplicitTermListItemProvider(this);
		}

		return explicitTermListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.PlainPatternVariableList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainPatternVariableListItemProvider plainPatternVariableListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.PlainPatternVariableList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainPatternVariableListAdapter() {
		if (plainPatternVariableListItemProvider == null) {
			plainPatternVariableListItemProvider = new PlainPatternVariableListItemProvider(this);
		}

		return plainPatternVariableListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.AnyPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnyPatternItemProvider anyPatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.AnyPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnyPatternAdapter() {
		if (anyPatternItemProvider == null) {
			anyPatternItemProvider = new AnyPatternItemProvider(this);
		}

		return anyPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ImplicitPairList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicitPairListItemProvider implicitPairListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ImplicitPairList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplicitPairListAdapter() {
		if (implicitPairListItemProvider == null) {
			implicitPairListItemProvider = new ImplicitPairListItemProvider(this);
		}

		return implicitPairListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.PairPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PairPatternItemProvider pairPatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.PairPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPairPatternAdapter() {
		if (pairPatternItemProvider == null) {
			pairPatternItemProvider = new PairPatternItemProvider(this);
		}

		return pairPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.StrategyConstruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrategyConstructItemProvider strategyConstructItemProvider;

	/**
	 * This creates an adapter for a {@link tom.StrategyConstruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrategyConstructAdapter() {
		if (strategyConstructItemProvider == null) {
			strategyConstructItemProvider = new StrategyConstructItemProvider(this);
		}

		return strategyConstructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.StrategyVisit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StrategyVisitItemProvider strategyVisitItemProvider;

	/**
	 * This creates an adapter for a {@link tom.StrategyVisit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStrategyVisitAdapter() {
		if (strategyVisitItemProvider == null) {
			strategyVisitItemProvider = new StrategyVisitItemProvider(this);
		}

		return strategyVisitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.VisitAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisitActionItemProvider visitActionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.VisitAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisitActionAdapter() {
		if (visitActionItemProvider == null) {
			visitActionItemProvider = new VisitActionItemProvider(this);
		}

		return visitActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.PatternList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PatternListItemProvider patternListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.PatternList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPatternListAdapter() {
		if (patternListItemProvider == null) {
			patternListItemProvider = new PatternListItemProvider(this);
		}

		return patternListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConstraintOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintOrItemProvider constraintOrItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConstraintOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintOrAdapter() {
		if (constraintOrItemProvider == null) {
			constraintOrItemProvider = new ConstraintOrItemProvider(this);
		}

		return constraintOrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConstraintAnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintAndItemProvider constraintAndItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConstraintAnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAndAdapter() {
		if (constraintAndItemProvider == null) {
			constraintAndItemProvider = new ConstraintAndItemProvider(this);
		}

		return constraintAndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConstraintP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintPItemProvider constraintPItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConstraintP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintPAdapter() {
		if (constraintPItemProvider == null) {
			constraintPItemProvider = new ConstraintPItemProvider(this);
		}

		return constraintPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConstraintMatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintMatchItemProvider constraintMatchItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConstraintMatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintMatchAdapter() {
		if (constraintMatchItemProvider == null) {
			constraintMatchItemProvider = new ConstraintMatchItemProvider(this);
		}

		return constraintMatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConstraintOp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintOpItemProvider constraintOpItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConstraintOp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintOpAdapter() {
		if (constraintOpItemProvider == null) {
			constraintOpItemProvider = new ConstraintOpItemProvider(this);
		}

		return constraintOpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.GomConstruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GomConstructItemProvider gomConstructItemProvider;

	/**
	 * This creates an adapter for a {@link tom.GomConstruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGomConstructAdapter() {
		if (gomConstructItemProvider == null) {
			gomConstructItemProvider = new GomConstructItemProvider(this);
		}

		return gomConstructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Definition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefinitionItemProvider definitionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Definition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefinitionAdapter() {
		if (definitionItemProvider == null) {
			definitionItemProvider = new DefinitionItemProvider(this);
		}

		return definitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDefinitionItemProvider typeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDefinitionAdapter() {
		if (typeDefinitionItemProvider == null) {
			typeDefinitionItemProvider = new TypeDefinitionItemProvider(this);
		}

		return typeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.OperatorDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorDefinitionItemProvider operatorDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.OperatorDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatorDefinitionAdapter() {
		if (operatorDefinitionItemProvider == null) {
			operatorDefinitionItemProvider = new OperatorDefinitionItemProvider(this);
		}

		return operatorDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ArgumentsList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentsListItemProvider argumentsListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ArgumentsList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentsListAdapter() {
		if (argumentsListItemProvider == null) {
			argumentsListItemProvider = new ArgumentsListItemProvider(this);
		}

		return argumentsListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.HookDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HookDefinitionItemProvider hookDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.HookDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHookDefinitionAdapter() {
		if (hookDefinitionItemProvider == null) {
			hookDefinitionItemProvider = new HookDefinitionItemProvider(this);
		}

		return hookDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.HookModuleDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HookModuleDefinitionItemProvider hookModuleDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.HookModuleDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHookModuleDefinitionAdapter() {
		if (hookModuleDefinitionItemProvider == null) {
			hookModuleDefinitionItemProvider = new HookModuleDefinitionItemProvider(this);
		}

		return hookModuleDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.HookTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HookTypeDefinitionItemProvider hookTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.HookTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHookTypeDefinitionAdapter() {
		if (hookTypeDefinitionItemProvider == null) {
			hookTypeDefinitionItemProvider = new HookTypeDefinitionItemProvider(this);
		}

		return hookTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.HookOperatorDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HookOperatorDefinitionItemProvider hookOperatorDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.HookOperatorDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHookOperatorDefinitionAdapter() {
		if (hookOperatorDefinitionItemProvider == null) {
			hookOperatorDefinitionItemProvider = new HookOperatorDefinitionItemProvider(this);
		}

		return hookOperatorDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.HookOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HookOperationItemProvider hookOperationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.HookOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHookOperationAdapter() {
		if (hookOperationItemProvider == null) {
			hookOperationItemProvider = new HookOperationItemProvider(this);
		}

		return hookOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.HostHookOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostHookOperationItemProvider hostHookOperationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.HostHookOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostHookOperationAdapter() {
		if (hostHookOperationItemProvider == null) {
			hostHookOperationItemProvider = new HostHookOperationItemProvider(this);
		}

		return hostHookOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_Rules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_RulesItemProvider hook_RulesItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_Rules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_RulesAdapter() {
		if (hook_RulesItemProvider == null) {
			hook_RulesItemProvider = new Hook_RulesItemProvider(this);
		}

		return hook_RulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_Graphrules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_GraphrulesItemProvider hook_GraphrulesItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_Graphrules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_GraphrulesAdapter() {
		if (hook_GraphrulesItemProvider == null) {
			hook_GraphrulesItemProvider = new Hook_GraphrulesItemProvider(this);
		}

		return hook_GraphrulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_Make} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_MakeItemProvider hook_MakeItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_Make}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_MakeAdapter() {
		if (hook_MakeItemProvider == null) {
			hook_MakeItemProvider = new Hook_MakeItemProvider(this);
		}

		return hook_MakeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_Make_Insert} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_Make_InsertItemProvider hook_Make_InsertItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_Make_Insert}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_Make_InsertAdapter() {
		if (hook_Make_InsertItemProvider == null) {
			hook_Make_InsertItemProvider = new Hook_Make_InsertItemProvider(this);
		}

		return hook_Make_InsertItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_Make_Empty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_Make_EmptyItemProvider hook_Make_EmptyItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_Make_Empty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_Make_EmptyAdapter() {
		if (hook_Make_EmptyItemProvider == null) {
			hook_Make_EmptyItemProvider = new Hook_Make_EmptyItemProvider(this);
		}

		return hook_Make_EmptyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_Free} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_FreeItemProvider hook_FreeItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_Free}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_FreeAdapter() {
		if (hook_FreeItemProvider == null) {
			hook_FreeItemProvider = new Hook_FreeItemProvider(this);
		}

		return hook_FreeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_FL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_FLItemProvider hook_FLItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_FL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_FLAdapter() {
		if (hook_FLItemProvider == null) {
			hook_FLItemProvider = new Hook_FLItemProvider(this);
		}

		return hook_FLItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_AU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_AUItemProvider hook_AUItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_AU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_AUAdapter() {
		if (hook_AUItemProvider == null) {
			hook_AUItemProvider = new Hook_AUItemProvider(this);
		}

		return hook_AUItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_InterfaceItemProvider hook_InterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_InterfaceAdapter() {
		if (hook_InterfaceItemProvider == null) {
			hook_InterfaceItemProvider = new Hook_InterfaceItemProvider(this);
		}

		return hook_InterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_Imports} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_ImportsItemProvider hook_ImportsItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_Imports}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_ImportsAdapter() {
		if (hook_ImportsItemProvider == null) {
			hook_ImportsItemProvider = new Hook_ImportsItemProvider(this);
		}

		return hook_ImportsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Hook_Block} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Hook_BlockItemProvider hook_BlockItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Hook_Block}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHook_BlockAdapter() {
		if (hook_BlockItemProvider == null) {
			hook_BlockItemProvider = new Hook_BlockItemProvider(this);
		}

		return hook_BlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.RulePattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RulePatternItemProvider rulePatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.RulePattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRulePatternAdapter() {
		if (rulePatternItemProvider == null) {
			rulePatternItemProvider = new RulePatternItemProvider(this);
		}

		return rulePatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.NamedRulePattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedRulePatternItemProvider namedRulePatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.NamedRulePattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedRulePatternAdapter() {
		if (namedRulePatternItemProvider == null) {
			namedRulePatternItemProvider = new NamedRulePatternItemProvider(this);
		}

		return namedRulePatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.AntiRulePattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AntiRulePatternItemProvider antiRulePatternItemProvider;

	/**
	 * This creates an adapter for a {@link tom.AntiRulePattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAntiRulePatternAdapter() {
		if (antiRulePatternItemProvider == null) {
			antiRulePatternItemProvider = new AntiRulePatternItemProvider(this);
		}

		return antiRulePatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.PlainRulePatternOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainRulePatternOperationItemProvider plainRulePatternOperationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.PlainRulePatternOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainRulePatternOperationAdapter() {
		if (plainRulePatternOperationItemProvider == null) {
			plainRulePatternOperationItemProvider = new PlainRulePatternOperationItemProvider(this);
		}

		return plainRulePatternOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.GraphRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphRuleItemProvider graphRuleItemProvider;

	/**
	 * This creates an adapter for a {@link tom.GraphRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphRuleAdapter() {
		if (graphRuleItemProvider == null) {
			graphRuleItemProvider = new GraphRuleItemProvider(this);
		}

		return graphRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TermGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermGraphItemProvider termGraphItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TermGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermGraphAdapter() {
		if (termGraphItemProvider == null) {
			termGraphItemProvider = new TermGraphItemProvider(this);
		}

		return termGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.PlainTermGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainTermGraphItemProvider plainTermGraphItemProvider;

	/**
	 * This creates an adapter for a {@link tom.PlainTermGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainTermGraphAdapter() {
		if (plainTermGraphItemProvider == null) {
			plainTermGraphItemProvider = new PlainTermGraphItemProvider(this);
		}

		return plainTermGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TermGraphVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermGraphVariableItemProvider termGraphVariableItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TermGraphVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermGraphVariableAdapter() {
		if (termGraphVariableItemProvider == null) {
			termGraphVariableItemProvider = new TermGraphVariableItemProvider(this);
		}

		return termGraphVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TermGraphFunc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermGraphFuncItemProvider termGraphFuncItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TermGraphFunc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermGraphFuncAdapter() {
		if (termGraphFuncItemProvider == null) {
			termGraphFuncItemProvider = new TermGraphFuncItemProvider(this);
		}

		return termGraphFuncItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConditionOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionOrItemProvider conditionOrItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConditionOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionOrAdapter() {
		if (conditionOrItemProvider == null) {
			conditionOrItemProvider = new ConditionOrItemProvider(this);
		}

		return conditionOrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConditionAnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionAndItemProvider conditionAndItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConditionAnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAndAdapter() {
		if (conditionAndItemProvider == null) {
			conditionAndItemProvider = new ConditionAndItemProvider(this);
		}

		return conditionAndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConditionP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionPItemProvider conditionPItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConditionP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionPAdapter() {
		if (conditionPItemProvider == null) {
			conditionPItemProvider = new ConditionPItemProvider(this);
		}

		return conditionPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConditionRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionRuleItemProvider conditionRuleItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConditionRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionRuleAdapter() {
		if (conditionRuleItemProvider == null) {
			conditionRuleItemProvider = new ConditionRuleItemProvider(this);
		}

		return conditionRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ConditionOp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionOpItemProvider conditionOpItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ConditionOp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionOpAdapter() {
		if (conditionOpItemProvider == null) {
			conditionOpItemProvider = new ConditionOpItemProvider(this);
		}

		return conditionOpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLTermItemProvider xmlTermItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLTermAdapter() {
		if (xmlTermItemProvider == null) {
			xmlTermItemProvider = new XMLTermItemProvider(this);
		}

		return xmlTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLTermSimple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLTermSimpleItemProvider xmlTermSimpleItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLTermSimple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLTermSimpleAdapter() {
		if (xmlTermSimpleItemProvider == null) {
			xmlTermSimpleItemProvider = new XMLTermSimpleItemProvider(this);
		}

		return xmlTermSimpleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLTermDouble} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLTermDoubleItemProvider xmlTermDoubleItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLTermDouble}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLTermDoubleAdapter() {
		if (xmlTermDoubleItemProvider == null) {
			xmlTermDoubleItemProvider = new XMLTermDoubleItemProvider(this);
		}

		return xmlTermDoubleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLTermText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLTermTextItemProvider xmlTermTextItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLTermText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLTermTextAdapter() {
		if (xmlTermTextItemProvider == null) {
			xmlTermTextItemProvider = new XMLTermTextItemProvider(this);
		}

		return xmlTermTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLTermComment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLTermCommentItemProvider xmlTermCommentItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLTermComment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLTermCommentAdapter() {
		if (xmlTermCommentItemProvider == null) {
			xmlTermCommentItemProvider = new XMLTermCommentItemProvider(this);
		}

		return xmlTermCommentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLTermProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLTermProcessItemProvider xmlTermProcessItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLTermProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLTermProcessAdapter() {
		if (xmlTermProcessItemProvider == null) {
			xmlTermProcessItemProvider = new XMLTermProcessItemProvider(this);
		}

		return xmlTermProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLNameList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLNameListItemProvider xmlNameListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLNameList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLNameListAdapter() {
		if (xmlNameListItemProvider == null) {
			xmlNameListItemProvider = new XMLNameListItemProvider(this);
		}

		return xmlNameListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLAttrList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLAttrListItemProvider xmlAttrListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLAttrList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLAttrListAdapter() {
		if (xmlAttrListItemProvider == null) {
			xmlAttrListItemProvider = new XMLAttrListItemProvider(this);
		}

		return xmlAttrListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLAttributeItemProvider xmlAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLAttributeAdapter() {
		if (xmlAttributeItemProvider == null) {
			xmlAttributeItemProvider = new XMLAttributeItemProvider(this);
		}

		return xmlAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLAttribute1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLAttribute1ItemProvider xmlAttribute1ItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLAttribute1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLAttribute1Adapter() {
		if (xmlAttribute1ItemProvider == null) {
			xmlAttribute1ItemProvider = new XMLAttribute1ItemProvider(this);
		}

		return xmlAttribute1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLAttribute2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLAttribute2ItemProvider xmlAttribute2ItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLAttribute2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLAttribute2Adapter() {
		if (xmlAttribute2ItemProvider == null) {
			xmlAttribute2ItemProvider = new XMLAttribute2ItemProvider(this);
		}

		return xmlAttribute2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLAttribute3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLAttribute3ItemProvider xmlAttribute3ItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLAttribute3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLAttribute3Adapter() {
		if (xmlAttribute3ItemProvider == null) {
			xmlAttribute3ItemProvider = new XMLAttribute3ItemProvider(this);
		}

		return xmlAttribute3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.XMLChilds} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XMLChildsItemProvider xmlChildsItemProvider;

	/**
	 * This creates an adapter for a {@link tom.XMLChilds}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXMLChildsAdapter() {
		if (xmlChildsItemProvider == null) {
			xmlChildsItemProvider = new XMLChildsItemProvider(this);
		}

		return xmlChildsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.TypeTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeTermItemProvider typeTermItemProvider;

	/**
	 * This creates an adapter for a {@link tom.TypeTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeTermAdapter() {
		if (typeTermItemProvider == null) {
			typeTermItemProvider = new TypeTermItemProvider(this);
		}

		return typeTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.KeyWord} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyWordItemProvider keyWordItemProvider;

	/**
	 * This creates an adapter for a {@link tom.KeyWord}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyWordAdapter() {
		if (keyWordItemProvider == null) {
			keyWordItemProvider = new KeyWordItemProvider(this);
		}

		return keyWordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Operator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorItemProvider operatorItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Operator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatorAdapter() {
		if (operatorItemProvider == null) {
			operatorItemProvider = new OperatorItemProvider(this);
		}

		return operatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.OperatorList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorListItemProvider operatorListItemProvider;

	/**
	 * This creates an adapter for a {@link tom.OperatorList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatorListAdapter() {
		if (operatorListItemProvider == null) {
			operatorListItemProvider = new OperatorListItemProvider(this);
		}

		return operatorListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.OperatorArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorArrayItemProvider operatorArrayItemProvider;

	/**
	 * This creates an adapter for a {@link tom.OperatorArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatorArrayAdapter() {
		if (operatorArrayItemProvider == null) {
			operatorArrayItemProvider = new OperatorArrayItemProvider(this);
		}

		return operatorArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Transformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransformationItemProvider transformationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Transformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransformationAdapter() {
		if (transformationItemProvider == null) {
			transformationItemProvider = new TransformationItemProvider(this);
		}

		return transformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ElementaryTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementaryTransformationItemProvider elementaryTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ElementaryTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementaryTransformationAdapter() {
		if (elementaryTransformationItemProvider == null) {
			elementaryTransformationItemProvider = new ElementaryTransformationItemProvider(this);
		}

		return elementaryTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.ElementaryTransformationRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementaryTransformationRuleItemProvider elementaryTransformationRuleItemProvider;

	/**
	 * This creates an adapter for a {@link tom.ElementaryTransformationRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementaryTransformationRuleAdapter() {
		if (elementaryTransformationRuleItemProvider == null) {
			elementaryTransformationRuleItemProvider = new ElementaryTransformationRuleItemProvider(this);
		}

		return elementaryTransformationRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Tracelink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TracelinkItemProvider tracelinkItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Tracelink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTracelinkAdapter() {
		if (tracelinkItemProvider == null) {
			tracelinkItemProvider = new TracelinkItemProvider(this);
		}

		return tracelinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tom.Resolve} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResolveItemProvider resolveItemProvider;

	/**
	 * This creates an adapter for a {@link tom.Resolve}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResolveAdapter() {
		if (resolveItemProvider == null) {
			resolveItemProvider = new ResolveItemProvider(this);
		}

		return resolveItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (hostCodeItemProvider != null) hostCodeItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (callItemProvider != null) callItemProvider.dispose();
		if (declarationItemProvider != null) declarationItemProvider.dispose();
		if (affectationItemProvider != null) affectationItemProvider.dispose();
		if (tomItemProvider != null) tomItemProvider.dispose();
		if (contextItemProvider != null) contextItemProvider.dispose();
		if (linkableItemProvider != null) linkableItemProvider.dispose();
		if (typeItemProvider != null) typeItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (globalVariableItemProvider != null) globalVariableItemProvider.dispose();
		if (localVariableItemProvider != null) localVariableItemProvider.dispose();
		if (variableSimpleItemProvider != null) variableSimpleItemProvider.dispose();
		if (variableListItemProvider != null) variableListItemProvider.dispose();
		if (blockItemProvider != null) blockItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (callbackItemProvider != null) callbackItemProvider.dispose();
		if (callbackDefinitionItemProvider != null) callbackDefinitionItemProvider.dispose();
		if (argumentsItemProvider != null) argumentsItemProvider.dispose();
		if (argumentItemProvider != null) argumentItemProvider.dispose();
		if (argumentTypeSuffixItemProvider != null) argumentTypeSuffixItemProvider.dispose();
		if (argumentTypePrefixItemProvider != null) argumentTypePrefixItemProvider.dispose();
		if (importConstructItemProvider != null) importConstructItemProvider.dispose();
		if (includeConstructItemProvider != null) includeConstructItemProvider.dispose();
		if (statementItemProvider != null) statementItemProvider.dispose();
		if (termItemProvider != null) termItemProvider.dispose();
		if (termSumItemProvider != null) termSumItemProvider.dispose();
		if (termConstItemProvider != null) termConstItemProvider.dispose();
		if (termNullItemProvider != null) termNullItemProvider.dispose();
		if (termVariableItemProvider != null) termVariableItemProvider.dispose();
		if (termOperationItemProvider != null) termOperationItemProvider.dispose();
		if (returnItemProvider != null) returnItemProvider.dispose();
		if (matchConsctructItemProvider != null) matchConsctructItemProvider.dispose();
		if (matchPatternItemProvider != null) matchPatternItemProvider.dispose();
		if (argumentMatchItemProvider != null) argumentMatchItemProvider.dispose();
		if (patternActionItemProvider != null) patternActionItemProvider.dispose();
		if (constraintPatternItemProvider != null) constraintPatternItemProvider.dispose();
		if (constraintActionItemProvider != null) constraintActionItemProvider.dispose();
		if (patternItemProvider != null) patternItemProvider.dispose();
		if (namedPatternItemProvider != null) namedPatternItemProvider.dispose();
		if (antiPatternItemProvider != null) antiPatternItemProvider.dispose();
		if (plainPatternConstItemProvider != null) plainPatternConstItemProvider.dispose();
		if (plainPatternVariableItemProvider != null) plainPatternVariableItemProvider.dispose();
		if (jokerPatternItemProvider != null) jokerPatternItemProvider.dispose();
		if (plainPatternOperationItemProvider != null) plainPatternOperationItemProvider.dispose();
		if (listItemProvider != null) listItemProvider.dispose();
		if (operationListItemProvider != null) operationListItemProvider.dispose();
		if (explicitTermListItemProvider != null) explicitTermListItemProvider.dispose();
		if (plainPatternVariableListItemProvider != null) plainPatternVariableListItemProvider.dispose();
		if (anyPatternItemProvider != null) anyPatternItemProvider.dispose();
		if (implicitPairListItemProvider != null) implicitPairListItemProvider.dispose();
		if (pairPatternItemProvider != null) pairPatternItemProvider.dispose();
		if (strategyConstructItemProvider != null) strategyConstructItemProvider.dispose();
		if (strategyVisitItemProvider != null) strategyVisitItemProvider.dispose();
		if (visitActionItemProvider != null) visitActionItemProvider.dispose();
		if (patternListItemProvider != null) patternListItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (constraintOrItemProvider != null) constraintOrItemProvider.dispose();
		if (constraintAndItemProvider != null) constraintAndItemProvider.dispose();
		if (constraintPItemProvider != null) constraintPItemProvider.dispose();
		if (constraintMatchItemProvider != null) constraintMatchItemProvider.dispose();
		if (constraintOpItemProvider != null) constraintOpItemProvider.dispose();
		if (gomConstructItemProvider != null) gomConstructItemProvider.dispose();
		if (definitionItemProvider != null) definitionItemProvider.dispose();
		if (typeDefinitionItemProvider != null) typeDefinitionItemProvider.dispose();
		if (operatorDefinitionItemProvider != null) operatorDefinitionItemProvider.dispose();
		if (argumentsListItemProvider != null) argumentsListItemProvider.dispose();
		if (hookDefinitionItemProvider != null) hookDefinitionItemProvider.dispose();
		if (hookModuleDefinitionItemProvider != null) hookModuleDefinitionItemProvider.dispose();
		if (hookTypeDefinitionItemProvider != null) hookTypeDefinitionItemProvider.dispose();
		if (hookOperatorDefinitionItemProvider != null) hookOperatorDefinitionItemProvider.dispose();
		if (hookOperationItemProvider != null) hookOperationItemProvider.dispose();
		if (hostHookOperationItemProvider != null) hostHookOperationItemProvider.dispose();
		if (hook_RulesItemProvider != null) hook_RulesItemProvider.dispose();
		if (hook_GraphrulesItemProvider != null) hook_GraphrulesItemProvider.dispose();
		if (hook_MakeItemProvider != null) hook_MakeItemProvider.dispose();
		if (hook_Make_InsertItemProvider != null) hook_Make_InsertItemProvider.dispose();
		if (hook_Make_EmptyItemProvider != null) hook_Make_EmptyItemProvider.dispose();
		if (hook_FreeItemProvider != null) hook_FreeItemProvider.dispose();
		if (hook_FLItemProvider != null) hook_FLItemProvider.dispose();
		if (hook_AUItemProvider != null) hook_AUItemProvider.dispose();
		if (hook_InterfaceItemProvider != null) hook_InterfaceItemProvider.dispose();
		if (hook_ImportsItemProvider != null) hook_ImportsItemProvider.dispose();
		if (hook_BlockItemProvider != null) hook_BlockItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (rulePatternItemProvider != null) rulePatternItemProvider.dispose();
		if (namedRulePatternItemProvider != null) namedRulePatternItemProvider.dispose();
		if (antiRulePatternItemProvider != null) antiRulePatternItemProvider.dispose();
		if (plainRulePatternOperationItemProvider != null) plainRulePatternOperationItemProvider.dispose();
		if (graphRuleItemProvider != null) graphRuleItemProvider.dispose();
		if (termGraphItemProvider != null) termGraphItemProvider.dispose();
		if (plainTermGraphItemProvider != null) plainTermGraphItemProvider.dispose();
		if (termGraphVariableItemProvider != null) termGraphVariableItemProvider.dispose();
		if (termGraphFuncItemProvider != null) termGraphFuncItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (conditionOrItemProvider != null) conditionOrItemProvider.dispose();
		if (conditionAndItemProvider != null) conditionAndItemProvider.dispose();
		if (conditionPItemProvider != null) conditionPItemProvider.dispose();
		if (conditionRuleItemProvider != null) conditionRuleItemProvider.dispose();
		if (conditionOpItemProvider != null) conditionOpItemProvider.dispose();
		if (xmlTermItemProvider != null) xmlTermItemProvider.dispose();
		if (xmlTermSimpleItemProvider != null) xmlTermSimpleItemProvider.dispose();
		if (xmlTermDoubleItemProvider != null) xmlTermDoubleItemProvider.dispose();
		if (xmlTermTextItemProvider != null) xmlTermTextItemProvider.dispose();
		if (xmlTermCommentItemProvider != null) xmlTermCommentItemProvider.dispose();
		if (xmlTermProcessItemProvider != null) xmlTermProcessItemProvider.dispose();
		if (xmlNameListItemProvider != null) xmlNameListItemProvider.dispose();
		if (xmlAttrListItemProvider != null) xmlAttrListItemProvider.dispose();
		if (xmlAttributeItemProvider != null) xmlAttributeItemProvider.dispose();
		if (xmlAttribute1ItemProvider != null) xmlAttribute1ItemProvider.dispose();
		if (xmlAttribute2ItemProvider != null) xmlAttribute2ItemProvider.dispose();
		if (xmlAttribute3ItemProvider != null) xmlAttribute3ItemProvider.dispose();
		if (xmlChildsItemProvider != null) xmlChildsItemProvider.dispose();
		if (typeTermItemProvider != null) typeTermItemProvider.dispose();
		if (keyWordItemProvider != null) keyWordItemProvider.dispose();
		if (operatorItemProvider != null) operatorItemProvider.dispose();
		if (operatorListItemProvider != null) operatorListItemProvider.dispose();
		if (operatorArrayItemProvider != null) operatorArrayItemProvider.dispose();
		if (transformationItemProvider != null) transformationItemProvider.dispose();
		if (elementaryTransformationItemProvider != null) elementaryTransformationItemProvider.dispose();
		if (elementaryTransformationRuleItemProvider != null) elementaryTransformationRuleItemProvider.dispose();
		if (tracelinkItemProvider != null) tracelinkItemProvider.dispose();
		if (resolveItemProvider != null) resolveItemProvider.dispose();
	}

}
